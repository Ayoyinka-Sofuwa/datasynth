# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /home/chief/datasynth/datasynth
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 125
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 35
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 100
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: datasynth
    style: []
      # border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 12
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 537
    content: "\e]0;chief@pop-os:~/datasynth/datasynth\e\\\e]7;file://pop-os/home/chief/datasynth/datasynth\e\\\e[?2004hchief@pop-os:~/datasynth/datasynth$ "
  - delay: 1071
    content: p
  - delay: 272
    content: 'y'
  - delay: 176
    content: t
  - delay: 104
    content: h
  - delay: 88
    content: o
  - delay: 160
    content: 'n'
  - delay: 184
    content: ' '
  - delay: 456
    content: 'n'
  - delay: 265
    content: 'ormalizers.py '
  - delay: 999
    content: a
  - delay: 184
    content: d
  - delay: 160
    content: d
  - delay: 183
    content: r
  - delay: 152
    content: e
  - delay: 352
    content: s
  - delay: 176
    content: s
  - delay: 264
    content: ' '
  - delay: 1024
    content: '"'
  - delay: 1608
    content: "\e[7m541 W Main St, Madison, Wisconsin 53703\e[27m"
  - delay: 960
    content: "\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b541 W Main St, Madison, Wisconsin 53703"
  - delay: 1096
    content: '"'
  - delay: 1151
    content: "\r\n\e[?2004l\r"
  - delay: 626
    content: "\r\n\r\n\e[1m> Entering new AddressNormalizer chain...\e[0m\r\ninput >> {'address': '541 W Main St, Madison, Wisconsin 53703'}\r\n\r\n\r\n\e[1m> Entering new LLMChain chain...\e[0m\r\nPrompt after formatting:\r\n\e[32;1m\e[1;3mFormat the following address as a list of python dictionaries of the form:\r\n[\r\n    { \r\n        \"house_number\": int, \r\n        \"road\": str, \r\n        \"unit\": int, \r\n        \"unit_type\": str, \r\n        \"po_box_number\": int, \r\n        \"city\": str, \r\n        \"state\": str, \r\n        \"postcode\": int\r\n        \"timezone\": str\r\n    }\r\n]. \r\n\r\nUse abbreviations for state and road type.\r\nUse short form zip codes.\r\n\r\nInput:\r\n\"541 W Main St, Madison, Wisconsin 53703\"\r\n\r\nOutput:\r\n[{\e[0m\r\n"
  - delay: 3273
    content: "\r\n\e[1m> Finished chain.\e[0m\r\n\r\n\e[1m> Finished chain.\e[0m\r\n[{'city': 'Madison',\r\n  'house_number': 541,\r\n  'po_box_number': None,\r\n  'postcode': 53703,\r\n  'road': 'W Main St',\r\n  'state': 'WI',\r\n  'timezone': 'America/Chicago',\r\n  'unit': None,\r\n  'unit_type': None}]\r\n"
  - delay: 113
    content: "\e]0;chief@pop-os:~/datasynth/datasynth\e\\\e]7;file://pop-os/home/chief/datasynth/datasynth\e\\\e[?2004hchief@pop-os:~/datasynth/datasynth$ "
  - delay: 2376
    content: "\e[?2004l\r\r\nlogout\r\n"
